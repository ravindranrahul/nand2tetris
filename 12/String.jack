// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field int maxLength,length;
	field Array str;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int _length) {
		 if( _length = 0 ) {
            let _length = 1;
        }
		let maxLength = _length;
		let str = Array.new(_length);
		let length =0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do str.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let str[length] = c;
		let length = length+1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let str[length] = 0;
		let length = length-1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int result,i;
		var boolean negative;
		let negative = false;
		let result =0;
		let i=0;


		if(str[0]=45){
			let negative = true;
		}
		while(i<length){	
			if((str[i]>47) & (str[i]<58)){
				let result = (result*10) + (str[i]-48);
			}
			let i = i+1;
		}
		if(negative){
			return -result;
		}else{
			return result;
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int msb,e;
		let length =0;

		if(val<0){
		  do appendChar(45);
		  let val = Math.abs(val);
		}

		while(val>10){
			let msb = val;
			let e = 1;
			//Get msb	
			while(msb>10){
				let msb = msb/10;
				let e = 10*e;
			}
			do appendChar(48+msb);
			let val = val - (e*msb);
		}
		do appendChar(48+val);
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		var char result;
		let result = 128;
		return result;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		var char result;
		let result = 129;
		return result;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		var char result;
		let result = 34;
		return result;
    }
}
