// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //Set A Register     

    // A Register takes input from instruction if A-Instruction
    // else it takes input from Alu if destination is A
    // A-Input
    Mux16(a=instruction,b=aluOut,sel=instruction[15],out=aRegisterInput);
    // A-load
    Not(in=instruction[15],out=isAinstruction);
    Or(a=isAinstruction,b=instruction[5],out=loadARegister);
    //Set A regsiter
    ARegister(in=aRegisterInput,load=loadARegister,out=aRegisterOut,out[0..14]=addressM);

    //Set D register
    // Condition it should be c-instruction and destination should be d register
    And(a=instruction[15],b=instruction[4],out=loadDregister);
    DRegister(in=aluOut,load=loadDregister,out=aluInput1);

    //Set M
    // Condition: C-instruction and destination should be M register
    And(a=instruction[15],b=instruction[3],out=writeM);

    //ALU Input 2 selector a: instruction[12]
    Mux16(a=aRegisterOut,b=inM,sel=instruction[12],out=aluInput2);

    // Compute cccccc: instruction[6..11]
    ALU(x=aluInput1,y=aluInput2,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,out=outM,
        zr=zeroResult,
        ng=negativeResult
    );


    //JMP condition jjj: instuction[0..2]
    Not(in=negativeResult,out=notNegativeResult);
    Not(in=zeroResult,out=notZeroResult);
    And(a=notNegativeResult,b=notZeroResult,out=positiveResult);

    And(a=positiveResult,b=instruction[0],out=canJumpPositive);
    And(a=zeroResult,b=instruction[1],out=canJumpZero);
    And(a=negativeResult,b=instruction[2],out=canJumpNegative);


    Or(a=canJumpPositive,b=canJumpZero,out=canJumpPositiveOrZero);
    Or(a=canJumpPositiveOrZero,b=canJumpNegative,out=jump);

    //Only load PC for c-instruction and jump 
    And(a=instruction[15],b=jump,out=loadPC);

    PC(in=aRegisterOut,load=loadPC,inc=true,reset=reset,out[0..14]=pc);

}
